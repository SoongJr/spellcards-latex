name: Build LaTeX document
on:
  push:
    branches:
      - main
      - release/*
  pull_request:
  workflow_dispatch:
env:
  file: spellcards  # root tex file to compile inside src folder (without extension)
                    # If you renamed your root tex file - originally "spellcards.tex" - (e.g. to get a different PDF name),
                    # simply also adjust the filename here.
jobs:
  check_formatting:
    runs-on: ubuntu-latest
    container:
      image: danteev/texlive:latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v5  # Checks-out repository under $GITHUB_WORKSPACE
      - name: Check formatting of *.tex files
        shell: bash        
        run: |
          set -euo pipefail
          declare -i failures=0
          while IFS= read -r file; do
            if ! latexindent --silent -kv --local=src/.latexindent.yaml "$file"; then
              failures+=1
              # escape the filename for use in workflow commands (comma, colon and percent need escaping)
              fileEscaped=$(echo "$file" | sed 's/,/%2C/g' | sed 's/:/%3A/g' | sed 's/%/%25/g')
              printf "::error file=%s,line=1::Invalid formatting in '%s', please check logs\n" "${fileEscaped}" "$(basename "${file}")"
            fi
          done < <(find . -name "*.tex")
          exit $((failures))
  lint_latex:
    # use chktex to scan the whole project for style issues that could later lead to problems
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v5  # Checks-out repository under $GITHUB_WORKSPACE
      - name: Lint ${{ env.file }}.tex
        # run chktex the same way LaTeX-Workshop extension of Visual Studio code would
        uses: dante-ev/latex-action@latest
        with:
          root_file: ${{ env.file }}.tex
          compiler: chktex
          args: -eall -n22 -n30 -e16 -w44 -q   # make sure to adjust these arguments to match your IDE's (or vice versa)
  build_latex:
    # use latexmk to create a PDF, it can detect whether to run biber and via a .latexmkrc file you can also tell it to run makeglossaries or other steps.
    # PDF is then uploaded so it shows up on the summary page of the succeeded action run.
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v5  # Checks-out repository under $GITHUB_WORKSPACE
      - name: Compile ${{ env.file }}.tex
        # run latexmk on the given file
        uses: dante-ev/latex-action@latest
        with:
          root_file: src/${{ env.file }}.tex
          args: -pdf -latexoption=-file-line-error -latexoption=-interaction=nonstopmode -latexoption=-shell-escape
      - name: Upload ${{ env.file }}.pdf
        # upload exactly this generated PDF (will show up at the bottom of each run of this github action)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file }}.pdf
          path: src/out/${{ env.file }}.pdf
          if-no-files-found: error
